{"version":3,"sources":["components/formulario.components.js","components/cita.components.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","setCita","error","setError","handleChange","e","target","name","value","Fragment","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3ed129ce.chunk.js","sourcesContent":["import React,{ useState } from \"react\";\nimport uuid from \"react-uuid\";\nimport PropTypes from 'prop-types';\n\n\nconst Formulario = ({ crearCita }) =>{\n\n    //crea state de la cita\n    const [cita, setCita] = useState({\n        mascota: '',\n        propietario: '',\n        fecha: '',\n        hora: '',\n        sintomas: ''\n    });\n\n    const [error, setError] = useState(false)\n\n    // funcion  en la cual se ejecuta sobre \n    //los input cuando el usuario escriba algo\n    const handleChange = e =>{\n        setCita({\n            ...cita,\n            [e.target.name]: e.target.value\n        });\n    }\n\n    //extraer valor del los input\n    const { mascota,propietario,fecha,hora,sintomas } = cita;\n\n    //funcion de agregar citas\n    const submitCita = e =>{\n        e.preventDefault();\n\n        //validar campos\n        if(mascota.trim() === '' || propietario.trim() === ''  || fecha.trim() === ''  || hora.trim() === ''  || sintomas.trim() === '' ){\n            setError(true);\n            return;\n        }\n\n        // Eliminar el mensaje previo \n        setError(false);\n\n        // asignar un ID\n        cita.id = uuid();\n\n        //crear la cita\n        crearCita(cita);\n\n        // reiniciar el formulario\n        setCita({\n            mascota: '',\n            propietario: '',\n            fecha: '',\n            hora: '',\n            sintomas: ''\n        })\n    }\n\n    return (\n       <React.Fragment>\n           <h2>Crear citas</h2>\n           { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null }\n           <form onSubmit={ submitCita}>\n               <label>Nombre Mascota</label>\n               <input \n                  type=\"text\" \n                  name=\"mascota\" \n                  className=\"u-full-width\"\n                  placeholder=\"nombre mascota\"\n                  onChange={ handleChange }\n                  value={ mascota }\n                />\n               <label>Nombre Dueño</label>\n               <input \n                  type=\"text\" \n                  name=\"propietario\" \n                  className=\"u-full-width\"\n                  placeholder=\"nombre dueño\"\n                  onChange={ handleChange }\n                  value={ propietario }\n                />\n               <label>Fecha</label>\n               <input \n                  type=\"date\" \n                  name=\"fecha\" \n                  className=\"u-full-width\"\n                  onChange={ handleChange }\n                  value={ fecha }\n                />\n               <label>Hora</label>\n               <input \n                  type=\"time\" \n                  name=\"hora\" \n                  className=\"u-full-width\"\n                  onChange={ handleChange }\n                  value={ hora }\n                />\n               <label>Síntoma</label>\n               <textarea \n                   name=\"sintomas\" \n                   className=\"u-full-width\" \n                   onChange={ handleChange }\n                   value={ sintomas }\n                ></textarea>\n               <button \n               type=\"submit\"\n               className=\"u-full-width button-primary\"\n               >Agregar citas</button>\n           </form>\n       </React.Fragment>\n    );\n}\n\nFormulario.propTypes = {\n    crearCita: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react'\nimport PropTypes from 'prop-types';\n\n\nconst Cita = ({ cita,eliminarCita }) =>(\n        <div className=\"cita\">\n            <p>Mascota: <span>{ cita.mascota }</span></p>\n            <p>Dueño: <span>{ cita.propietario }</span></p>\n            <p>Fecha: <span>{ cita.fecha }</span></p>\n            <p>Hora: <span>{ cita.hora }</span></p>\n            <p>Sintomas: <span>{ cita.sintomas }</span></p>\n\n            <button \n                className=\"button eliminar u-full-width\"\n                onClick={ () => eliminarCita(cita.id)  }\n            >Eliminar &times;</button>\n        </div>\n    );\n\nCita.propTypes = {\n    cita: PropTypes.object.isRequired,\n    eliminarCita: PropTypes.func.isRequired\n}\n\nexport default Cita;","import React,{ useState,useEffect } from 'react';\nimport Formulario from './components/formulario.components';\nimport Cita from './components/cita.components';\n\nfunction App() {\n\n  //citas en LocalStorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales) {\n    citasIniciales = [];\n  }\n  // array  citas\n  const [citas,  setCitas] = useState(citasIniciales);\n\n  // Use Effect para realizar ciertas operaciones cuando el state cambia\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if(citasIniciales) {\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas]);\n\n  //funcion para tomar las citas actuales y agregar nuevas citas\n  const crearCita = cita =>{\n    setCitas([\n      ...citas, cita\n    ]);\n  }\n\n  // Función que elimina una cita por su id\n  const eliminarCita = id => {\n   const nuevasCitas = citas.filter(cita => cita.id !== id );\n   setCitas(nuevasCitas);\n  }\n\n    // Mensaje condicional\n    const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus Citas';\n\n\n  return (  \n    <React.Fragment>\n       <h1>Administrador de pacientes</h1>\n       <div className=\"container\">\n         <div className=\"row\">\n           <div className=\"one-half column\">\n             <Formulario crearCita={ crearCita }/>\n           </div>\n           <div className=\"one-half column\">\n               <h2>{ titulo }</h2>\n              {\n                citas.map(cita =>(\n                  <Cita  \n                  key={ cita.id } \n                  cita={ cita }\n                  eliminarCita={ eliminarCita }\n                  />\n                ))\n              }\n           </div>\n        </div>\n       </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}