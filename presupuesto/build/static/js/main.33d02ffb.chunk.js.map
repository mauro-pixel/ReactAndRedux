{"version":3,"sources":["components/Error.components.js","components/Pregunta.components.js","components/Formulario.components.js","components/Gasto.components.js","components/Listado.components.js","helpers/helpers.js","components/Control.components.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","setGuardarPresupuesto","setGuardarRestante","setMostrarPregunta","useState","cantidad","setGuardarCantidad","error","setGuardarError","Fragment","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","setGuardarGasto","setGuardarCrearGasto","nombre","setGuardarNombre","trim","gasto","id","shortid","generate","Gasto","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","Control","App","mostrarPregunta","setGuardarGastos","crearGasto","useEffect","prespuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.33d02ffb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({mensaje}) =>  ( \n    <p className=\"alert alert-danger error\"> {mensaje} </p>\n );\n\nError.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\n\nexport default Error;","import React, { useState } from 'react'\nimport Error from './Error.components';\nimport PropTypes from 'prop-types';\n\nconst Pregunta =({ setGuardarPresupuesto,setGuardarRestante,setMostrarPregunta }) => {\n\n    // definir el state de cantidad\n    const [cantidad , setGuardarCantidad] = useState(0);\n    const [error, setGuardarError] = useState(false);\n\n    // funcion  que va lee el presupuesto\n    const definirPresupuesto = e =>{\n        setGuardarCantidad(parseInt(e.target.value) || '');\n    }\n\n    //submit para definir el presupuesto\n    const agregarPresupuesto = e =>{\n        e.preventDefault();\n\n        //validar\n        if(cantidad < 1 || isNaN( cantidad )){\n            setGuardarError(true);\n            return;\n        }\n        // si pasa la validacion\n        setGuardarError(false);\n        setGuardarPresupuesto(cantidad);\n        setGuardarRestante(cantidad);\n        setMostrarPregunta(false);\n    }\n\n    return(\n        <React.Fragment>\n            <h2>Coloca tu presupuesto</h2>\n            { error ? <Error mensaje=\" Presupuesto es Incorrecto\" />  : null }\n            <form onSubmit={ agregarPresupuesto }>\n                <input\n                  type=\"number\"\n                  className=\"u-full-width\"\n                  placeholder=\"Coloca tu presupuesto\"\n                  onChange={ definirPresupuesto }\n                />\n                <input\n                   type=\"submit\"\n                   className=\"button-primary u-full-width\"\n                   value=\"Definir Presupuesto\"\n                />\n            </form>\n        </React.Fragment>\n    )\n}\n\nPregunta.propTypes = {\n    setGuardarPresupuesto: PropTypes.func.isRequired,\n    setGuardarRestante: PropTypes.func.isRequired,\n    setMostrarPregunta: PropTypes.func.isRequired\n}\n\nexport default Pregunta;","import React, { useState } from 'react';\nimport Error from './Error.components';\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nconst Formulario = ({ setGuardarGasto,setGuardarCrearGasto }) =>{\n\n    // Definir state\n    const [nombre, setGuardarNombre] = useState('');\n    const [cantidad, setGuardarCantidad] = useState(0);\n    const [ error, setGuardarError] = useState(false);\n\n    // cuando el usuario agrega un gasto\n    const agregarGasto = e =>{\n        e.preventDefault();\n\n        // validar\n        if(cantidad < 1 || isNaN( cantidad) || nombre.trim() === '') {\n            setGuardarError(true);\n            return;\n        }\n        setGuardarError(false);\n\n        // construir el gasto\n        const gasto = {\n            id: shortid.generate(),\n            nombre, \n            cantidad       \n        }\n\n        // pasar el gasto al componente principal\n        setGuardarGasto(gasto);\n        setGuardarCrearGasto(true);\n\n        // resetear el form\n        setGuardarNombre('');\n        setGuardarCantidad(0);\n    }\n\n    return(\n        <form onSubmit={agregarGasto} >\n            <h2>Agrega tus gastos aqui</h2>\n            { error ? <Error mensaje=\"Ambos campos son obligatorios o Presupuesto Incorrecto\" /> : null }\n            <div className=\"campo\">\n                <label>Nombre Gasto:</label>\n                <input\n                   type=\"text\"\n                   className=\"u-full-width\"\n                   placeholder=\"Ej. Transporte\"\n                   value={nombre}\n                   onChange={e => setGuardarNombre(e.target.value)}\n                />\n            </div>\n            <div className=\"campo\">\n                <label>Cantidad Gasto:</label>\n                <input\n                   type=\"number\"\n                   className=\"u-full-width\"\n                   placeholder=\"Ej. 100\"\n                   value={cantidad}\n                   onChange={e => setGuardarCantidad(parseInt( e.target.value) || '')}\n                />\n            </div>\n            <input\n                type=\"submit\"\n                className=\"button-primary u-full-width\"\n                value=\"Agregar Gasto\"\n            />\n        </form>\n    )\n}\n\nFormulario.propTypes = {\n    setGuardarGasto: PropTypes.func.isRequired,\n    setGuardarCrearGasto: PropTypes.func.isRequired\n}\n \n\nexport default Formulario;","import React from 'react'\nimport PropTypes from 'prop-types';\n\nconst Gasto = ({ gasto }) => (\n   <li className=\"gastos\">\n       <p>\n           {gasto.nombre}\n           <span className=\"gasto\">${gasto.cantidad}</span>\n       </p>\n   </li>\n);\n\nGasto.propTypes = {\n    gasto: PropTypes.object.isRequired\n}\n\nexport default Gasto;","import React from 'react'\nimport Gasto from './Gasto.components';\nimport PropTypes from 'prop-types';\n\nconst Listado = ({ gastos }) => (\n    <div className=\"gastos-realizados\">\n        <h2>Listado de gasto</h2>\n        {gastos.map(gasto => (\n            <Gasto\n                key={gasto.id}\n                gasto ={gasto}\n            />\n        ))}\n    </div>\n);\n\n\nListado.propTypes = {\n    gastos: PropTypes.array.isRequired\n}\n\nexport default Listado;","export const revisarPresupuesto = (presupuesto, restante) => {\n    let clase;\n\n    if( (presupuesto / 4) > restante ) {\n        clase = 'alert alert-danger';\n    } else if ((presupuesto / 2) > restante ) {\n        clase = 'alert alert-warning';\n    } else {\n        clase = 'alert alert-success';\n    }\n\n    return clase;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { revisarPresupuesto } from '../helpers/helpers';\n\nconst Control= ({presupuesto, restante}) => {\n    return ( \n        <React.Fragment>\n            <div className=\"alert alert-primary\">\n                Presupuesto: $ {presupuesto}\n            </div>\n            <div className={revisarPresupuesto(presupuesto, restante)}>\n                Restante: $ {restante}\n            </div>\n        </React.Fragment>\n\n     );\n}\n\nControl.propTypes = {\n    presupuesto: PropTypes.number.isRequired,\n    restante: PropTypes.number.isRequired\n}\n \nexport default Control;","import React, { useState, useEffect } from 'react';\n\nimport Pregunta from './components/Pregunta.components';\nimport Formulario from './components/Formulario.components';\nimport Listado from './components/Listado.components';\nimport Control from './components/Control.components';\n\nfunction App() {\n\n  // definir el state\n  const [presupuesto, setGuardarPresupuesto] = useState(0);\n  const [restante, setGuardarRestante] = useState(0);\n  const [mostrarPregunta, setMostrarPregunta] = useState(true);\n  const [gastos, setGuardarGastos] = useState([]);\n  const [gasto, setGuardarGasto] = useState({});\n  const [crearGasto, setGuardarCrearGasto] = useState(false);\n\n  //useEffect que actualiza el restante\n  useEffect(()=>{\n    if(crearGasto){\n      //agrega el nuevo presupuesto\n      setGuardarGastos([\n        ...gastos,\n        gasto\n      ]);\n\n      // resta del presupuesto\n      const prespuestoRestante = restante-gasto.cantidad;\n      setGuardarRestante(prespuestoRestante);\n\n\n      //resetear\n      setGuardarCrearGasto(false);\n\n    }\n  },[gasto,crearGasto,gastos,restante]);\n\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Gasto Semanal</h1>\n        <div className=\"contenido-principal contenido\">\n          { mostrarPregunta ? ( \n              <Pregunta\n                setGuardarPresupuesto={setGuardarPresupuesto}\n                setGuardarRestante={setGuardarRestante}\n                setMostrarPregunta={setMostrarPregunta}\n              /> \n            ):(\n              <div className=\"row\">\n                  <div className=\"one-half column\">\n                    <Formulario\n                      setGuardarGasto={setGuardarGasto}\n                      setGuardarCrearGasto={setGuardarCrearGasto}\n                    />\n                  </div>\n                  <div className=\"one-half column\">\n                    <Listado \n                        gastos={gastos}\n                    />\n                    <Control\n                        presupuesto={presupuesto}\n                        restante={restante}\n                    />\n                  </div>\n              </div>\n            )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}